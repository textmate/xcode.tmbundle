<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/bin/ruby -wKU

SUPPORT       = ENV['TM_SUPPORT_PATH']
MATE          = "#{SUPPORT}/bin/mate"

require "#{SUPPORT}/lib/osx/plist"
require "#{SUPPORT}/lib/escape"

require "cgi"
require "fileutils"
require "find"
require "iconv"

TEMPLATE_DIRS = [
  '/Library/Application Support/Apple/Developer Tools/Project Templates',
  %x{ "$TM_SUPPORT_PATH/bin/find_app" Xcode.app }.sub(/Applications\/Xcode.app$/, 'Library/Xcode/Project Templates'),
  ENV['HOME'] + '/Library/Application Support/Apple/Developer Tools/Project Templates'
]

module ProcessTemplate
  module_function
  
  def expand(str, variables)
    str.gsub(/«(DATE|FULLUSERNAME|ORGANIZATIONNAME|PRODUCTNAME|PROJECTNAMEASIDENTIFIER|PROJECTNAMEASXML|PROJECTNAME|TARGETNAMEASIDENTIFIER|USERNAME|UUID|YEAR)»/) do |match|
      variables[$1]
    end
  end

  def expand_file(file, variables)
    data = IO.read(file)

    open(file, "w") do |io|
      if data[0..1] == "\xFE\xFF"
        new_data = expand(Iconv.conv('utf-8', 'utf-16', data), variables)
        io &lt;&lt; Iconv.conv('utf-16', 'utf-8', new_data)
      elsif mac_roman?(data)
        io &lt;&lt; expand(Iconv.conv('utf-8', 'mac', data), variables)
      elsif utf8?(data)
        io &lt;&lt; expand(data, variables)
      else
        io &lt;&lt; data # we probably should not have opened the file for writing
      end
    end
  end

  def mac_roman?(data)
    data =~ /\xC7(DATE|FULLUSERNAME|ORGANIZATIONNAME|PRODUCTNAME|PROJECTNAMEASIDENTIFIER|PROJECTNAMEASXML|PROJECTNAME|TARGETNAMEASIDENTIFIER|USERNAME|UUID|YEAR)\xC8/
  end

  def utf8?(data)
    data =~ /«(DATE|FULLUSERNAME|ORGANIZATIONNAME|PRODUCTNAME|PROJECTNAMEASIDENTIFIER|PROJECTNAMEASXML|PROJECTNAME|TARGETNAMEASIDENTIFIER|USERNAME|UUID|YEAR)»/
  end

  def process(dir, name)
    variables = {
      'DATE'                      =&gt; Time.now.strftime('%F'),
      'FULLUSERNAME'              =&gt; ENV['TM_FULLNAME'],
      'ORGANIZATIONNAME'          =&gt; ENV['TM_ORGANIZATION_NAME'],
      'PRODUCTNAME'               =&gt; name,
      'PROJECTNAMEASIDENTIFIER'   =&gt; name.gsub(/[^a-zA-Z0-9]/, '_'),
      'PROJECTNAMEASXML'          =&gt; CGI.escapeHTML(name),
      'PROJECTNAME'               =&gt; name,
      'TARGETNAMEASIDENTIFIER'    =&gt; name.gsub(/[^a-zA-Z0-9]/, '_'),
      'USERNAME'                  =&gt; ENV['LOGNAME'],
      'UUID'                      =&gt; `uuidgen`.chomp,
      'YEAR'                      =&gt; Time.now.year,
    }

    template_info = Find.find(dir) { |path| break path if path =~ /\/TemplateInfo.plist$/ }
    exit unless File.exist? template_info.to_s

    data = File.read(template_info)
    data = Iconv.conv('utf-8', 'mac', data) if mac_roman? data

    plist = OSX::PropertyList.load(data)

    plist['FilesToRename'].each_pair do |key, value|
      from = File.join(dir, expand(key, variables))
      to = File.join(dir, expand(value, variables))
      FileUtils.mv(from, to) if File.exist?(from) &amp;&amp; !File.exist?(to)
    end unless plist['FilesToRename'].nil?

    src_dir = File.split(template_info).first
    Dir.glob("#{src_dir}/*.*").each do |file|
      expand_file(file, variables)
    end

    dst_dir = src_dir.sub(/(.*\/)[^\/]*(\.[^.])/, "\\1#{name}\\2")
    File.delete(template_info)
    FileUtils.mv(src_dir, dst_dir) if File.exist?(src_dir) &amp;&amp; !File.exist?(dst_dir)

    plist['FilesToMacroExpand'].each do |file|
      variables['FILENAME'] = file
      expand_file(File.join(dir, expand(file, variables)), variables)
    end unless plist['FilesToMacroExpand'].nil?
  end
end

def scan_dir(dir)
  entries = [ ]
  Dir.foreach(dir) do |entry|
    next unless File.directory?(dir) and entry !~ /^\./
    entries &lt;&lt; { 'name' =&gt; entry, 'path' =&gt; File.join(dir, entry) }
  end
  entries 
end

templates = [ ]

TEMPLATE_DIRS.each do |templates_dir|
  next unless File.directory?(templates_dir)
  Dir.foreach(templates_dir) do |dir|
    next if dir =~ /^\./
    children = scan_dir(File.join(templates_dir, dir))
    if template_list = templates.find { |tpl| tpl['name'] == dir }
      template_list['children'] += children
    else
      templates &lt;&lt; { 'name' =&gt; dir, 'children' =&gt; children }
    end
  end
end

plist = { 'templates' =&gt; templates, 'projectName' =&gt; 'untitled' }.to_plist
defaults = { 'Xcode New Project Location'          =&gt; '~/',
             'Xcode New Project Selected Template' =&gt; [ [ 1, 6 ] ] }.to_plist

if res = OSX::PropertyList.load(%x{ "$DIALOG" -cmp #{e_sh plist} -d #{e_sh defaults} 'New Project' })['result']

  src = res['returnArgument']

  dir = File.expand_path(res['location'])
  dst = File.join(dir, res['name'])
  
  abort "Location does not exist."    unless File.exists?(dir)
  abort "Destination already exists." if File.exists?(dst)

  FileUtils.cp_r(src, dst)
  ProcessTemplate.process(dst, res['name'])
  %x{ #{e_sh MATE} #{e_sh dst} &amp;&gt;/dev/null &amp; }

end
</string>
	<key>input</key>
	<string>none</string>
	<key>name</key>
	<string>New Project Using Xcode Template…</string>
	<key>output</key>
	<string>showAsTooltip</string>
	<key>uuid</key>
	<string>73E356A1-87CF-4B8E-A4B5-B14F29683F12</string>
</dict>
</plist>
